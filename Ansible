
Configuration management is the process of handling changes to a system in a way that assures integrity over time,
typically involving tools and processes that facilitate automation and observability. 


Ansible Overview :
  - Ansible is a agentless modern configuration management tool that facilitates the task of setting up and maintaining remote servers, storage, 
    networking, and software with a minimalist design intended to get users up and running quickly.
  - Users write Ansible provisioning scripts in YAML, a user-friendly data serialization standard that is not tied to 
    any particular programming language. This enables users to create sophisticated provisioning scripts more intuitively compared to similar tools in the same category.
  - Ansible doesnâ€™t require any special software to be installed on the nodes that will be managed with this tool.
    A control machine is set up with the Ansible software, which then communicates with the nodes via standard SSH on linux and vinrm on windows.
  - It is push based tool.

Control node : where ansible is installd
Manage node : on which action are perform by ansible

install link : https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html

Inventory file :  it  defines the hosts and groups of hosts so you can run automation tasks on multiple hosts at the same time.
  - you can create group of manage nodes in inventory
      [groupname]
      Manage node
      Manage node

ad hoc commands :
  - An Ansible ad hoc command uses the /usr/bin/ansible command-line tool to automate a single task on one or more managed nodes.
  - ad hoc commands are quick and easy, but they are not reusable. 
  - syntax : $ ansible [pattern] -m [module] -a "[module options]"
  - link : https://docs.ansible.com/ansible/latest/command_guide/intro_adhoc.html

cmd:
-m : module
-a : argument
ansible-playbook -i inventory <Adhoc command or Playbook.yml>
ansible -i inventory.ini -m shell -a "apt install openjdk" all

- Ansible Roles : 
  - Ansible Roles provide a well-defined framework and structure for setting your tasks, variables, handlers, 
    metadata, templates, and other files. They enable us to reuse and share our Ansible code efficiently.
  - we can reference and call them in our playbooks with just a few lines of code while we can reuse the 
    same roles for many projects without the need to duplicate our code.
  - create role syntax : ansible-galaxy init <your_role_name>

- Components of an Ansible Role:

  - defaults : Includes default values for variables of the role. 
  - files  : Contains static and custom files that the role uses to perform various tasks.
  - handlers : A set of handlers that are triggered by tasks of the role. 
  - meta : Includes metadata information for the role, its dependencies, the author, license, available platform, etc.
  - tasks : A list of tasks to be executed by the role. 
  - templates : Contains Jinja2 template files used by tasks of the role. 
  - tests : Includes configuration files related to role testing.
  - vars : Contains variables defined for the role. 


- Why Use Ansible Roles?

  - Modularity : Roles allow you to break down complex playbooks into smaller, reusable components.
    Each role handles a specific part of the configuration or setup.

  - Reusability : Once created, roles can be reused across different playbooks and projects.
    This saves time and effort in writing redundant code.

  - Maintainability : By organizing related tasks into roles, it becomes easier to manage and maintain the code.
    Changes can be made in one place and applied consistently wherever the role is used.

  - Readability : Roles make playbooks cleaner and easier to read by abstracting away the details into logically named roles.

  - Collaboration : Roles facilitate collaboration among team members by allowing them to work on different parts of the infrastructure independently.

  - Consistency : Using roles ensures that the same setup and configuration procedures are applied 
    uniformly across multiple environments, reducing the risk of configuration drift.






